" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=~/.vim/bundle/neobundle.vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }

NeoBundle 'Valloric/YouCompleteMe', {
            \ 'build' : {
            \     'mac' : 'git submodule update --init --recursive && python install.py',
            \     'linux' : 'git submodule update --init --recursive && python install.py',
            \    },
            \ }

NeoBundle 'wincent/command-t', {
    \ 'build': {
    \   'mac': 'sh -c "cd ruby/command-t && ruby extconf.rb && make"',
    \   'linux': 'sh -c "cd ruby/command-t && ruby extconf.rb && make"',
    \  }
    \}

NeoBundle 'JuliaLang/julia-vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'powerline/powerline'

NeoBundle 'MarcWeber/vim-addon-mw-utils'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'garbas/vim-snipmate'
NeoBundle 'honza/vim-snippets'

NeoBundle 'scrooloose/syntastic'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'Shougo/unite.vim'

NeoBundle 'tpope/vim-fugitive'
NeoBundle 'lervag/vimtex'
NeoBundle 'plasticboy/vim-markdown'

NeoBundle 'hdima/python-syntax'
NeoBundle 'flazz/vim-colorschemes'
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'nvie/vim-flake8'
NeoBundle 'tpope/vim-unimpaired'

NeoBundle 'Raimondi/delimitMate'
NeoBundle 'easymotion/vim-easymotion'
NeoBundle 'vim-scripts/applescript.vim'

NeoBundle 'christoomey/vim-tmux-navigator'

NeoBundle 'tpope/vim-repeat'
NeoBundle 'svermeulen/vim-easyclip'

NeoBundle 'hashivim/vim-terraform'


call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck




" replacing unite with command-t
nnoremap <silent> <C-p> :CommandT<CR>




map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
" These `n` & `N` mappings are options. You do not have to map `n` & `N` to
" EasyMotion.
" " Without these mappings, `n` & `N` works fine. (These mappings just provide
" " different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

"== GUIafy the VIM terminal interface =="
set nocompatible
set mouse=a
set number
set visualbell

if &t_Co > 2 || has("gui_running")
"     " switch syntax highlighting on, when the terminal has colors
    syntax on
    set background=dark
    colorscheme twilight256
endif

"== Filetypes =="
au BufNewFile,BufRead *.html.ep set filetype=html.perl.eperl "Mojolicious embedded perl templates"

"== Buffers =="
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"== Indentation =="
filetype plugin indent on
set autoindent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set backspace=indent,eol,start

"Map the tab key in visual and normal mode to indent code"
vmap <tab> >gv
vmap <s-tab> <gvd
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

set showmatch

"== Searching =="
set smartcase
set incsearch
set hlsearch

" Only do this part when compiled with support for autocommands "
if has("autocmd")

  " Syntax of these languages is fussy over tabs Vs spaces "
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

  " Customisations based on house-style (arbitrary) "
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab

  autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab

  " Treat .rss files as XML "
  autocmd BufNewFile,BufRead *.rss setfiletype xml

  " Automatically set linebreak when writing prose
  autocmd FileType tex setlocal wrap linebreak nolist foldlevel=99 " sw=4 ts=4
  autocmd BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
  autocmd FileType markdown setlocal wrap linebreak nolist foldlevel=99 " sw=4 ts=4

endif

"Set the code folding options."
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

":map <C-p> :w<Bar>execute 'silent !tmux send-keys -t right "python %" C-m'<Bar>redraw!<C-M>
map <Leader>p :w<Bar>execute 'silent !tmux send-keys -t .-1 C-p C-m'<Bar>redraw!<C-M>

" prevent vim from ever writing a backup file (just annoying)
set nobackup
set noswapfile

"set shortcut for toggling in tcomment
" map <C-\> :TComment<CR>
" STICK WITH DEFAULT MAPPING OF <C-/> <C-/>

" map ยง <Plug>snipMateNextOrTrigger
imap <C-J> <Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger
" let g:snips_trigger_key = '<C-p>'
"


"code to enable the powerline status option"
set laststatus=2
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup

" Source the vimrc file after saving it
if has("autocmd")
    autocmd bufwritepost .vimrc source $MYVIMRC
endif

let python_highlight_space_errors = 0
let python_highlight_all = 1
"let python_highlight_builtin_objs = 1

nnoremap <CR> :noh<CR><CR>

set autowrite

" set clipboard=unnamed
if has("clipboard")
    set clipboard=unnamed " copy to the system clipboard

  " if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  " endif
endif

" map <C-h> :bp<CR>
" map <C-l> :bn<CR>

":imap jk <Esc>


" http://www.damtp.cam.ac.uk/user/rbw/vim-skim.html
" let g:Tex_TreatMacViewerAsUNIX = 1
" let g:Tex_ExecuteUNIXViewerInForeground = 1

" let g:Tex_DefaultTargetFormat = 'pdf'
" let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 -interaction=nonstopmode $*'
" let g:Tex_ViewRule_pdf='open -a ~/Applications/Skim.app'
" let g:Tex_MultipleCompileFormats='pdf'
" autocmd FileType tex call Tex_SetTeXCompilerTarget('View','pdf')

let g:vimtex_view_general_viewer
    \ = '/Users/nickfyson/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '@line @pdf @tex'
let g:syntastic_tex_checkers = ['chktex']


"http://molecularclouds.blogspot.co.uk/2012/01/latex-vim-skim.html
" map <Leader>ps :w<CR>:silent !make <CR>:silent !~/Applications/Skim.app/Contents/SharedSupport/displayline -r <C-r>=line('.')<CR> %<.pdf %<CR>:redraw!<CR>
" map <Leader>pl <Leader>ll
" map <Leader>pv <Leader>lv


set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim

"set Unite bindings for usefule things
"search recently opened files
nnoremap <silent> <Leader>m :Unite -start-insert -buffer-name=recent -winheight=10 file_mru<cr>
"navigate open buffers
nnoremap <Leader>b :Unite -start-insert -buffer-name=buffers -winheight=10 buffer<cr>
"search application
nnoremap <Leader>f :Unite grep:.<cr>
"File searching just like in Ctrl-P
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file_rec/async','sorters','sorter_rank')


map <Leader>n :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif


" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

"##############################################################################
"" Easier split navigation
"##############################################################################
"
"" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>


let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-k> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-h> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_highlighting = 0

"let g:syntastic_python_exec =
let g:syntastic_python_checkers = ['flake8']
"let g:syntastic_python_flake8_args='--config=~/.config/flake8'


" permanently enable the gutter, and make it invisible
augroup mine
    au BufWinEnter * sign define mysign
    au BufWinEnter * exe "sign place 1337 line=1 name=mysign buffer=" . bufnr('%')
augroup END
highlight SignColumn ctermbg=black

"source ~/temp_vimrc

"inoremap <special> <Esc> <Esc>hl

"prevent the redrawing of window from putting only one line on screen
set scrolloff=4

" Show trailing whitepace and spaces before a tab:
:highlight ExtraWhitespace ctermbg=red guibg=red
:autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/
autocmd BufWritePre * :%s/\s\+$//e



